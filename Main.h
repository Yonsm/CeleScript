


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header
#include "Define.h"
#include "UniBase.h"
#include "Resource.h"

extern HWND g_hWnd;
extern HINSTANCE g_hInst;

HRESULT DISP(PCTSTR ptzCmd);
HRESULT PAGE(PTSTR ptzCmd);
HRESULT SERV(PCTSTR ptzCmd);
HRESULT DEVI(PTSTR ptzCmd);
HRESULT ENVI(PTSTR ptzEnv, BOOL bSystem = FALSE);

HRESULT REGX(PTSTR ptzCmd);
HRESULT ASOC(PCTSTR ptzCmd);
HRESULT Process(PCTSTR ptzScript, PCTSTR ptzCurFile);
INT_PTR CALLBACK MAIN(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Log
inline VOID Log(PCTSTR ptzLog)
{
	UINT i = (UINT) SendDlgItemMessage(g_hWnd, IDC_Log, WM_GETTEXTLENGTH, 0, 0);
	SendDlgItemMessage(g_hWnd, IDC_Log, EM_SETSEL, i, i);
	SendDlgItemMessage(g_hWnd, IDC_Log, EM_REPLACESEL, 0, (LPARAM) ptzLog);
}

inline VOID Log(UINT uFmtRes, ...)
{
	if (g_hWnd)
	{
		va_list va;
		TCHAR tzLog[MAX_STR];
		TCHAR tzStr[MAX_PATH];
		va_start(va, uFmtRes);
		UINT i = UStrPrintV(tzLog, _GetStr(uFmtRes), va);
		va_end(va);
		Log(tzLog);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Get privilege
inline HRESULT Priv(PCTSTR ptzName)
{
	HANDLE hToken;
	if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
	{
		return FALSE;
	}

	TOKEN_PRIVILEGES tPriv;
	LookupPrivilegeValue(NULL, ptzName, &tPriv.Privileges[0].Luid);
	tPriv.PrivilegeCount = 1;
	tPriv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	return AdjustTokenPrivileges(hToken, FALSE, &tPriv, sizeof(TOKEN_PRIVILEGES), NULL, NULL);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Execute command via shell
inline BOOL ShellOpen(PCTSTR ptzFile, PCTSTR ptzParam = NULL, INT nCmdSHow = SW_NORMAL)
{
	SHELLEXECUTEINFO se = {0};
	se.hwnd = g_hWnd;
	se.cbSize = sizeof(se);
	se.lpFile = ptzFile;
	se.lpParameters = ptzParam;
	se.nShow = nCmdSHow;
	return ShellExecuteEx(&se);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
